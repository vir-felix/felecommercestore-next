// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  username String @unique @db.VarChar(40)
  email String @unique @db.VarChar(255)
  verified Boolean @default(false)
  role Role @default(USER)
  cart Cart?
  userAddress UserAddress[]
  firstName String? @db.VarChar(50)
  lastName String? @db.VarChar(50)
  phoneNumber String? @unique @db.VarChar(15)
  password String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  avatarURL String?
  deactivated Boolean @default(false)
  review Review[]
  wishlist Wishlist[]
  order Order[]

  @@unique([firstName, lastName])
  @@map(name: "users")
}

model Order {
  id Int @id @default(autoincrement())
  userId String
  user User @relation(fields: [userId], references: [id])
  orderLine OrderLine[]
  status OrderStatus
  userPayment UserPayment?
  shippingAddressId String
  shippingAddress Address @relation(fields: [shippingAddressId], references: [id])
  date DateTime @default(now())
  total Float
  additionalInfo String? @db.VarChar(255)

  @@map(name: "user_orders")
}

model OrderLine {
  id Int @id @default(autoincrement())
  productId String
  product Product @relation(fields: [productId], references: [id])
  orderId Int
  order Order @relation(fields: [orderId], references: [id])
  review Review?
  quantity Int
  size Float
  total Float

  @@map(name: "order_items")
}

model UserPayment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  orderId Int @unique
  order Order @relation(fields: [orderId], references: [id])
  paymentMethod PaymentType
  amount Float
  currency String @db.VarChar(6)
  billingAddressId String
  billingAddress Address @relation(fields: [billingAddressId], references: [id])

  @@map(name: "user_payments")
}

model Wishlist {
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([userId, productId])
  @@map(name: "wishlist")
}

model UserAddress {
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressId String
  address Address @relation(fields: [addressId], references: [id], onDelete: Cascade)
  isDefault Boolean @default(true)

  @@id([userId, addressId])
  @@map(name: "users_addresses")
}

model Address {
  id String @id
  unitNumber Int?
  addressLine1 String @db.VarChar(100)
  addressLine2 String? @db.VarChar(100)
  city String @db.VarChar(50)
  region String @db.VarChar(100)
  postalCode String @db.VarChar(10)
  country String @db.VarChar(60)
  userAddress UserAddress[]
  order Order[]
  userPayment UserPayment[]

  @@map(name: "addresses")
}

model Cart {
  id Int @id @default(autoincrement())
  userId String @unique
  user User @relation(fields: [userId], references: [id])
  total Float

  @@map(name: "users_cart")
}

model CartItem {
  cartId Int
  productId String
  size Float
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity Int
  total Float

  @@id([cartId, productId])
  @@map(name: "cart_items")
}

model Product {
  id String @unique
  title String @unique @db.VarChar(255)
  dateAdded DateTime @default(now())
  mediaURLs String[]
  price Float
  discount Float @default(0.0)
  shippingCost Float @default(0.0)
  details String
  salesCount Int @default(0)
  color String @default("") @db.VarChar(25)
  sizes Float[]
  year Int?
  sku String @db.VarChar(10) @unique
  stockQty Int
  gender Gender @default(MEN)
  type Category
  review Review[]
  wishlist Wishlist[]
  orderLine OrderLine[]
  cartItem CartItem[]

  @@map(name: "products")
}

model Review {
  userId String
  user User @relation(fields: [userId], references: [id])
  productId String
  product Product @relation(fields: [productId], references: [id])
  comment String?
  rating Float @default(5)
  addedAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  orderLineId Int? @unique
  orderLine OrderLine? @relation(fields: [orderLineId], references: [id], onDelete: SetNull)

  @@id([userId, productId])
  @@map(name: "reviews")
}

model Announcement {
  id Int @id @default(autoincrement())
  headline String @default("") @db.VarChar(255)
  details String
  addedAt DateTime @default(now())
  updatedAt DateTime? @updatedAt

  @@map(name: "announcements")
}

model NewsletterRecipient {
  email String @id
  subscribed Boolean @default(true)
  addedAt DateTime @default(now())

  @@map(name: "newsletter_recipients")
}

model CurrencyRate {
  symbol String @id @db.Char(3) @default("USD")
  rate Float @default(1)

  @@map(name: "currency-rates")
}

enum Role {
  USER
  ADMIN
}

enum Gender {
  MEN
  WOMEN
  KIDS
  BABY
  UNISEX
}

enum OrderStatus {
  PENDING
  AWAITING_PAYMENT
  PAYMENT_RECEIVED
  COMPLETED
  SHIPPED
  CANCELLED
  DECLINED
  REFUNDED
  DISPUTED
}

enum PaymentType {
  PAYPAL
  STRIPE
  WEPAY
  SKRILL
  AMAZON_APS
  COINBASE
}

enum Category {
  HIGH
  MID
  LOW
}